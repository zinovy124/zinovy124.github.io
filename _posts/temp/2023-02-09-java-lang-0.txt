---
title: "[Java/문법] 자바 코딩에 필요한 간단 문법 정리"
categories: [Java, 문법]
tags: [Java, 문법, 자바, 정리]
---
> 1. [Hello World!](#hello-world)
> 2. [변수와 데이터 타입]()
> 3. [조건문과 반복문]()
> 4. [제어자]()
> 5. [객체지향 페러다임]()
> 6. [상속]()
> 7. [생성자]()
> 8. [인터페이스]()
> 9. [추상 클래스]()
> 10. [선택적, 그리고 추가적 내용]()

---

# Hello World!

우선 간단히 Hello World!를 출력하는 코드로 개략적으로 자바로 코딩하는 데에 대한 큰 그림을 잡아보자.
   
```java
public class Example {
    public static void main(String[] args) {
        System.out.println("Hello World!");
    }
}
```
   
자바는 모든 것이 클래스 단위로 이루어지며, 위 코드에서 보이는 main 메소드에서 프로그램이 시작되고 끝난다.   
즉, `public static void main(String[] args)`는 어떤 프로그램이건 관계 없이 반드시 존재해야 하는 메소드다.   
그리고 Hello World!라는 문자열을 `System.out.println()` 메소드에 전달함으로써 그 문자열을 출력할 수 있다.   
더는 설명할 게 없다. 이는 절대규칙이기 때문에 그냥 따르면 된다.   
1 + 1이 왜 2냐고 묻지 말도록 하자.
   
# 변수와 데이터 타입
변수는 여타 언어와 동일하게 선언할 수 있다.   
데이터 타입과 변수명을 작성하면 된다.   
데이터 타입은 크게   
정수: `int`   
실수(부동소수점 수): `double`   
불린: `boolean`   
이 있다.   
예를 들어,
```java
int a;
double b;
boolean c;
```
와 같이 사용하면 된다.
   
# 조건문과 반복문
조건문은 역시 `if` 만한 게 없다. 더 있다면 `else`랑 `else if` 정도겠다.  

그리고 자바에서 사용되는 비교 연산자는 다음과 같다.   

| 비교연산자 | 설명 |
| --- | --- |
| x < y | x가 y보다 작다 |
| x > y | x가 y보다 크다 |
| x == y | x와 y가 같다 |
| x != y | x와 y가 같지 않다 |
| x >= y | x가 y보다 크거나 같다 |
| x <= y | x가 y보다 작거나 같다 |
| x || y | x와 y 둘 중 적어도 하나가 참이면 참이다 |
| x && y | x와 y 모두 참이어야 참이다 |
| !x | x가 거짓이면 참이다 |
   
다음과 같이 사용하자.
```java
if (condition) {
    // some logics...
} else if (condition2) {
    // some logics...
} else {
    // some logics...
}
```
   
그 밖에 또 switch문이 있다.
```java
switch (입력변수) {
    case 입력값1:
        // some logics...
        break;
    case 입력값2:
        // some logics...
        break;
    
    default:
        // some logics...
        break;
}
```

반복문도 역시 `for`, `while`, ~~`do while`~~ 이 있다.
```java
for (int i = 0; i < 10; i++) {
    // some logics will be iterated 10 times...
}

while (true) {
    // some logics will be iterated forever...
    break; // UNTILL MEET MY BREAK LINE!!!!!!!!
}
```

그리고 `for-each`문이 있는데, 사용하면 편하니 한 번 알아보자.

# 선택적, 그리고 추가적 내용

이 부분은 굳이 읽지 않아도 되는 내용이지만, 후에 도움이 될 내용들을 수록하였다.   
이곳에서 다룰 내용은 추가적으로 목차를 만들 수 있을 만큼 많은 내용이다.   
상기 다루었던 내용은 자바로 코딩을 하려면 반드시 알아야 하는 핵심 내용이지만, 이 부분은 코드 스타일, 관련 API 등에 대해 다루어 볼 것이다.   

> 1. [코드 작성 시 가독성을 위해 지켜줘야 할 것]()

# 코드 작성 시 가독성을 위해 지켜줘야 할 것

### 1. 중괄호
중괄호는 K&R 스타일로 작성하도록 한다. 즉, 다음과 같이 작성한다.   

```java
if (true) {
    System.out.println("It will be always printed");
}
```

시작하는 중괄호를 제어문과 같은 라인에 두는 것이다.   

또한 제어문이 한 줄이더라도 중괄호를 생략하지 않는다.

```java
if (true)
    System.out.println("Wrong");

if (true) {
    System.out.println("Good");
}
```
   
### 2. 띄어쓰기
#### 2-1. 클래스
클래스 키워드 다음 여는 중괄호를 띄운다.

```java
public class Example {
    // Some logics...
}
```
   
#### 2-2. 메소드(선언)
메소드 선언부에서 인자를 전달하기 위한 소괄호를 작성 후 띄어준다.
   
```java
public void methodExample(int args) {
    // Some logics...
}
```
   
#### 2-3. 메소드(호출)
메소드 호출 시 메소드명과 소괄호를 붙여 쓴다.
   
```java
methodExample(7);
```
   
#### 2-4. 배열
배열 다음에는 띄어쓰기 없이 왼쪽 괄호를 사용한다.
   
```java
temp = arr[0] + arr[1];
```
   
#### 2-5. 이진 연산자
이진 연산자 간에는 양쪽에 띄어쓰기를 한 칸씩 해준다.
   
```java
a=b+c;          // Wrong
a = b+c;        // Wrong
a=b + c;        // Wrong
a = b + c;      // Good

z = 2*x + 3*y;         // Wrong
z = 2 * x + 3 * y;     // Good
z = (2 * x) + (3 * y); // Good
```

#### 2-6. 쉼표 및 세미콜론
쉼표와 세미콜론(라인의 끝을 알리는 세미콜론 제외) 뒤에 띄어쓰기를 해준다.

```java
for (int i = 0; i < 10; i++) {
    // Some logics iterate 10 times
}

someMethod(args1, args2, args3);
```
   
#### 2-7. cast
cast(명시적 형 변환) 사용시 띄어쓰기 없이 작성한다.

```java
(SomeClass)temp.returns;
```

#### 2-8. if, while, for, switch, catch 문
if, while, for, switch, catch 문 뒤에는 띄어쓰기를 사용한다.
   
```java
if (bool)
while (bool)
for (...)
switch (plag)
catch (someExeption e)
```
   
### 3. 클래스 멤버 정렬 순서
클래스 멤버는 필드(전역변수), 생성자, 메소드 순으로 정렬하도록 한다.

```java
public class SomeClass {
    // fields

    // constructor

    // method
}
```
   
### 4. C 스타일 배열 선언 금지
```java
int wrong[10];
int[10] good;
```

### 5. 지시자의 표기는 자바 사양 상의 등장 순서를 지킨다.
```java
public protected private abstract static final transient volatile synchronized native strictfp
```
   
### 6. 작명 규칙
클래스, 인터페이스 등의 클래스 격은 `UpperCamelCase`로 작성한다.   
패키지명은 소문자만 사용한다.   
그 외의 모든 식별자(필드 식별자, 변수, 메소드, 파라미터, enum 등)은 모두 `lowerCamelCase`로 작성한다.